==========
nth
==========

module Nth

nth : Nat -> [a] -> Maybe a {
  match {
    Z, x::_ -> Just x,
    Z, []   -> Nothing,
    S n, _::xs -> nth n xs,
  }
}

---

(module (module_ident)
  (val_def 
    (ident)
    (func_type (ctor_type (ctor_ident))
      (func_type (list_type (var_type (ident)))
        (app_type (ctor_type (ctor_ident)) (var_type (ident)))))
    (match
        (match_branch (pattern_group
                        (ctor_pattern (ctor (ctor_ident)))
                        (cons_pattern (var_pattern (ident)) (wildcard_pattern)))
          (app (ctor (ctor_ident)) (var (ident))))
        (match_branch (pattern_group
                        (ctor_pattern (ctor (ctor_ident)))
                        (list_pattern))
          (ctor (ctor_ident)))
        (match_branch (pattern_group
                        (ctor_pattern (ctor (ctor_ident)) (var_pattern (ident)))
                        (cons_pattern (wildcard_pattern) (var_pattern (ident))))
          (app (var (ident)) (var (ident)) (var (ident)))))))
