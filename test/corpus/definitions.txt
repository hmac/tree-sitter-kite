==========
Type applications
==========

module Foo

foo1 : A {
  MkA
}

foo2 : A B {
  MkA
}

foo3 : A B C {
  MkA
}

---

(module (module_ident)
  (val_def 
    (ident)
    (ctor_type (ctor_ident))
    (ctor (ctor_ident)))
  (val_def 
    (ident)
    (app_type (ctor_type (ctor_ident)) (ctor_type (ctor_ident)))
    (ctor (ctor_ident)))
  (val_def 
    (ident)
    (app_type
      (ctor_type (ctor_ident))
      (ctor_type (ctor_ident))
      (ctor_type (ctor_ident)))
    (ctor (ctor_ident))))

==========
Function types
==========

module Foo

foo1 : A -> B {
  MkA
}

foo2 : A -> B -> C {
  MkA
}

foo3 : A B -> C {
  MkA
}

foo4 : A -> B C {
  MkA
}

---

(module (module_ident)
  (val_def 
    (ident)
    (func_type
      (ctor_type (ctor_ident))
      (ctor_type (ctor_ident)))
    (ctor (ctor_ident)))
  (val_def 
    (ident)
    (func_type
      (ctor_type (ctor_ident))
      (func_type
        (ctor_type (ctor_ident))
        (ctor_type (ctor_ident))))
    (ctor (ctor_ident)))
  (val_def 
    (ident)
    (func_type
      (app_type (ctor_type (ctor_ident)) (ctor_type (ctor_ident)))
      (ctor_type (ctor_ident)))
    (ctor (ctor_ident)))
  (val_def 
    (ident)
    (func_type
      (ctor_type (ctor_ident))
      (app_type (ctor_type (ctor_ident)) (ctor_type (ctor_ident))))
    (ctor (ctor_ident))))

==========
List types
==========

module Foo

foo1 : [A] {
  MkA
}

foo2 : A -> [B] {
  MkA
}

---

(module (module_ident)
  (val_def 
    (ident)
    (list_type (ctor_type (ctor_ident)))
    (ctor (ctor_ident)))
  (val_def 
    (ident)
    (func_type
      (ctor_type (ctor_ident))
      (list_type (ctor_type (ctor_ident))))
    (ctor (ctor_ident))))

==========
Applications
==========

module Foo

foo : A {
  a b c
}

---

(module (module_ident)
  (val_def 
    (ident)
    (ctor_type (ctor_ident))
    (app (var (ident)) (var (ident)) (var (ident)))))

==========
nth
==========

module Nth

nth : Nat -> [a] -> Maybe a {
  match {
    Z, x::_ -> Just x,
    Z, []   -> Nothing,
    S n, _::xs -> nth n xs,
  }
}

---

(module (module_ident)
  (val_def 
    (ident)
    (func_type (ctor_type (ctor_ident))
      (func_type (list_type (var_type (ident)))
        (app_type (ctor_type (ctor_ident)) (var_type (ident)))))
    (match
        (match_branch (pattern_group
                        (ctor_pattern (ctor (ctor_ident)))
                        (cons_pattern (var_pattern (ident)) (wildcard_pattern)))
          (app (ctor (ctor_ident)) (var (ident))))
        (match_branch (pattern_group
                        (ctor_pattern (ctor (ctor_ident)))
                        (list_pattern))
          (ctor (ctor_ident)))
        (match_branch (pattern_group
                        (ctor_pattern (ctor (ctor_ident)) (var_pattern (ident)))
                        (cons_pattern (wildcard_pattern) (var_pattern (ident))))
          (app (var (ident)) (var (ident)) (var (ident)))))))
